security:
    # Password hashers configuration
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    # User provider
    providers:
        users_in_memory: { memory: null }
        app_user_provider:  # Add your user provider
            entity:
                class: App\Entity\User  # Adjust this to your User entity
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        # Firewall for the API
        api:
            pattern: ^/api  # Protect routes starting with /api
            stateless: true  # No session is used for API
            provider: app_user_provider  # Use the app user provider
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator  # JWT authenticator

        # Main firewall for web
        main:
            lazy: true
            provider: users_in_memory

    # Access control rules
    access_control:
        - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }  # Allow anonymous access for login
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }  # Protect all other API routes

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
